---
title: "Condfounding Medication Changes"
author: "Vitaly Druker"
date: "2023-09-01"
draft: true
categories: [R, simulation, clinical trial design]
---




```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
```
```{mermaid}
graph TB;
TX(Treatment) -->|α1| A2; TX -->|α2| A3;
A1(Baseline BP)-->|β| A2(Time 1 BP); A2-->|β|A3(Time 2 BP);
A2-->|λ|M2;
M1(Baseline Meds) -->|γ| M2(Meds Between\nTime 1 & 2);
M2-->|δ|A3; 
```


```{r}
update_bp <- function(prior_bp,
                      prior_meds,
                      prior_med_effect,
                      tx_effect) {
    prior_bp +
        prior_meds * prior_med_effect +
        tx_effect
}

#' The `update_meds` function uses the `prior_bp` and `prior_meds` as a starting
#' point for updating the number of meds taken. This function attempts to
#' simulate a clinician observing a high BP and prescribing more meds to try to
#' control it. Meds are either added or taken away from the number of prior
#' meds. The entire function incorporates both $\gamma$ and $\lambda$
#' transformations.
#' @param prior_meds test
update_meds <- function(prior_meds, prior_bp, prob_med_change = 1) {
    med_difference <- dplyr::case_when(
        prior_bp >= 140 ~ 1,
        prior_bp >= 130 ~ 0,
        prior_bp < 130 ~ -1
    )

    # allow randomness in medication change 
    # when prob_med_change = 1 then everyone changes meds according to the above
    change_meds <- rbinom(length(prior_meds), size = 1, prob = prob_med_change)
    prior_meds + change_meds * med_difference
}


simulate_trial <- function(bl_bp_mean, bl_bp_sd,
                           bl_meds_mean, bl_meds_sd,
                           N.t, N.s,
                           additional_med_effect,
                           treatment_effect,
                           sham_effect,
                           effect_sd = 5,
                           prob_med_change = 1,
                           quietly = TRUE) {
    N <- N.t + N.s
    TX <- c(rep(1, N.t), rep(0, N.s))

    # create baseline measurements
    bl_bp <- rnorm(N, bl_bp_mean, bl_bp_sd)
    bl_meds <- abs(round(rnorm(N, bl_meds_mean, bl_meds_sd)))

    # calculate change from baseline to time1, time2 to time 1
    tx_net_effect <- diff(c(0, treatment_effect))
    sham_net_effect <- diff(c(0, sham_effect))

    time1_effects <- rnorm(
        n = N,
        tx_net_effect[1] * TX + sham_net_effect[1] * (1-TX),
        sd = effect_sd
    )

    # time1
    time1_bp <- update_bp(
        prior_bp = bl_bp,
        prior_meds = bl_meds,
        # meds do not effect time1 result
        prior_med_effect = 0,
        tx_effect = time1_effects
    )
    time1_meds <- update_meds(bl_meds,
        time1_bp,
        prob_med_change = prob_med_change
    )
    
    time2_effects <- rnorm(
        n = N,
        tx_net_effect[2] * TX + sham_net_effect[2] * (1-TX),
        sd = effect_sd
    ) 
    # time2
    time2_bp <- update_bp(
        prior_bp = time1_bp,
        prior_meds = time1_meds - bl_meds,
        prior_med_effect = additional_med_effect,
        tx_effect = time2_effects
    )

    out <- tibble::tibble(
        patientid = 1:N,
        TX = TX,
        bl_bp = round(bl_bp),
        bl_meds,
        time1_bp = round(time1_bp),
        time1_meds,
        time2_bp = round(time2_bp)
    )

    out
}
```



```{r}

set.seed(1234)
sim_trial <- simulate_trial(
  bl_bp_mean = 150, bl_bp_sd = 10,
  bl_meds_mean = 3, bl_meds_sd = 0,
  N.t = 1e4, N.s = 1e4,
  additional_med_effect = -10, 
  treatment_effect = c(-12, -8),
  sham_effect = c(0,0),
  effect_sd = 5,
  prob_med_change = 1)

```

```{r}
# everything looks good for time1
lm(time1_bp ~ TX + bl_meds + bl_bp, data = sim_trial)

# doesn't look good for time 2
lm(time2_bp ~ TX + bl_bp + time1_meds, data = sim_trial)

# time 1 to 2 looks good
lm(time2_bp ~ TX + time1_bp, data = sim_trial)

lm(time2_bp ~ TX + time1_bp + time1_meds, data = sim_trial)
```



```{r}
long_sim_trial <- sim_trial |>
  select(TX, patientid, ends_with("_bp")) |>
  pivot_longer(ends_with("_bp"), names_to = "timepoint", values_to = "bp") |>
  mutate(timepoint = factor(timepoint, levels = c("bl_bp", "time1_bp", "time2_bp"), labels = c("bl", "time1", "time2")),
        patientid = as.factor(patientid))


long_sim_trial_meds <- sim_trial |>
  select(TX, patientid, ends_with("_meds")) |>
  pivot_longer(ends_with("_meds"), names_to = "timepoint", values_to = "meds") |>
  mutate(timepoint = factor(timepoint, levels = c("bl_meds", "time1_meds"), labels = c("time1", "time2")),
        patientid = as.factor(patientid))

long_sim_trial <- dplyr::left_join(long_sim_trial, long_sim_trial_meds, by = join_by(TX, patientid, timepoint))
long_sim_trial[["med_effect"]] <- as.integer(long_sim_trial$timepoint == "time2")
long_sim_trial_med_imp  <- long_sim_trial
long_sim_trial_med_imp$meds[is.na(long_sim_trial_med_imp$meds)] <- 0
```

```{r}
library(lme4)
lme4_fit <- lme4::lmer(bp ~ TX*timepoint + (1|patientid) + meds:med_effect, data = long_sim_trial_med_imp)
lme4_fit

```


```{r}
library(mmrm)
mmrm_fit <- mmrm::mmrm(bp ~ TX*timepoint + us(timepoint|patientid) + meds:timepoint , data = long_sim_trial_med_imp)
# meds can be included as meds:timepoint but there are some NAs for baseline and time1 since there is no variability to the meds
mmrm_fit

# vcov(mmrm_fit)[1:6, 1:6] |> cov2cor() |> round(2)
# this is close but the estimate for timepiotn2 is 3x the medication effect
```

```{r}

emm_obj <- emmeans::emmeans(mmrm_fit, ~TX|timepoint)
emmeans::contrast(emm_obj, "trt.vs.ctrl", ref = "TX0")
```

```{r}

```

```{r}
# install.packages('brms.mmrm')

```


```{r}
sim_trial |> 
    subset(TX == 0, select = c(bl_bp, time1_bp, time2_bp))  |> cov()



library(ggplot2)
ggplot(sim_trial, aes( x = bl_bp, y = time1_bp, color = as.factor(TX))) +
geom_point() +
facet_wrap(~TX)


```
